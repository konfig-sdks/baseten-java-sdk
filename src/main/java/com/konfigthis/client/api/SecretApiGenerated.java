/*
 * Baseten management API
 * REST API for management of Baseten resources
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.SecretV1;
import com.konfigthis.client.model.SecretsV1;
import com.konfigthis.client.model.UpsertSecretRequestV1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SecretApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SecretApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SecretApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllSecretsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/secrets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllSecretsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllSecretsCall(_callback);

    }


    private ApiResponse<SecretsV1> getAllSecretsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllSecretsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SecretsV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllSecretsAsync(final ApiCallback<SecretsV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllSecretsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SecretsV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllSecretsRequestBuilder {

        private GetAllSecretsRequestBuilder() {
        }

        /**
         * Build call for getAllSecrets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of Baseten secrets. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllSecretsCall(_callback);
        }


        /**
         * Execute getAllSecrets request
         * @return SecretsV1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of Baseten secrets. </td><td>  -  </td></tr>
         </table>
         */
        public SecretsV1 execute() throws ApiException {
            ApiResponse<SecretsV1> localVarResp = getAllSecretsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllSecrets request with HTTP info returned
         * @return ApiResponse&lt;SecretsV1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of Baseten secrets. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SecretsV1> executeWithHttpInfo() throws ApiException {
            return getAllSecretsWithHttpInfo();
        }

        /**
         * Execute getAllSecrets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of Baseten secrets. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SecretsV1> _callback) throws ApiException {
            return getAllSecretsAsync(_callback);
        }
    }

    /**
     * Gets all secrets
     * 
     * @return GetAllSecretsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Baseten secrets. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllSecretsRequestBuilder getAllSecrets() throws IllegalArgumentException {
        return new GetAllSecretsRequestBuilder();
    }
    private okhttp3.Call upsertNewSecretCall(UpsertSecretRequestV1 upsertSecretRequestV1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upsertSecretRequestV1;

        // create path and map variables
        String localVarPath = "/v1/secrets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertNewSecretValidateBeforeCall(UpsertSecretRequestV1 upsertSecretRequestV1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'upsertSecretRequestV1' is set
        if (upsertSecretRequestV1 == null) {
            throw new ApiException("Missing the required parameter 'upsertSecretRequestV1' when calling upsertNewSecret(Async)");
        }

        return upsertNewSecretCall(upsertSecretRequestV1, _callback);

    }


    private ApiResponse<SecretV1> upsertNewSecretWithHttpInfo(UpsertSecretRequestV1 upsertSecretRequestV1) throws ApiException {
        okhttp3.Call localVarCall = upsertNewSecretValidateBeforeCall(upsertSecretRequestV1, null);
        Type localVarReturnType = new TypeToken<SecretV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertNewSecretAsync(UpsertSecretRequestV1 upsertSecretRequestV1, final ApiCallback<SecretV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertNewSecretValidateBeforeCall(upsertSecretRequestV1, _callback);
        Type localVarReturnType = new TypeToken<SecretV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpsertNewSecretRequestBuilder {
        private final String name;
        private final String value;

        private UpsertNewSecretRequestBuilder(String name, String value) {
            this.name = name;
            this.value = value;
        }

        /**
         * Build call for upsertNewSecret
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A Baseten secret. Note that we do not support retrieving secret values. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpsertSecretRequestV1 upsertSecretRequestV1 = buildBodyParams();
            return upsertNewSecretCall(upsertSecretRequestV1, _callback);
        }

        private UpsertSecretRequestV1 buildBodyParams() {
            UpsertSecretRequestV1 upsertSecretRequestV1 = new UpsertSecretRequestV1();
            upsertSecretRequestV1.name(this.name);
            upsertSecretRequestV1.value(this.value);
            return upsertSecretRequestV1;
        }

        /**
         * Execute upsertNewSecret request
         * @return SecretV1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A Baseten secret. Note that we do not support retrieving secret values. </td><td>  -  </td></tr>
         </table>
         */
        public SecretV1 execute() throws ApiException {
            UpsertSecretRequestV1 upsertSecretRequestV1 = buildBodyParams();
            ApiResponse<SecretV1> localVarResp = upsertNewSecretWithHttpInfo(upsertSecretRequestV1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute upsertNewSecret request with HTTP info returned
         * @return ApiResponse&lt;SecretV1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A Baseten secret. Note that we do not support retrieving secret values. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SecretV1> executeWithHttpInfo() throws ApiException {
            UpsertSecretRequestV1 upsertSecretRequestV1 = buildBodyParams();
            return upsertNewSecretWithHttpInfo(upsertSecretRequestV1);
        }

        /**
         * Execute upsertNewSecret request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A Baseten secret. Note that we do not support retrieving secret values. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SecretV1> _callback) throws ApiException {
            UpsertSecretRequestV1 upsertSecretRequestV1 = buildBodyParams();
            return upsertNewSecretAsync(upsertSecretRequestV1, _callback);
        }
    }

    /**
     * Upserts a secret
     * Creates a new secret or updates an existing secret if one with the provided name already exists. The name and creation date of the created or updated secret is returned.
     * @param upsertSecretRequestV1  (required)
     * @return UpsertNewSecretRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A Baseten secret. Note that we do not support retrieving secret values. </td><td>  -  </td></tr>
     </table>
     */
    public UpsertNewSecretRequestBuilder upsertNewSecret(String name, String value) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (value == null) throw new IllegalArgumentException("\"value\" is required but got null");
            

        return new UpsertNewSecretRequestBuilder(name, value);
    }
}
