/*
 * Baseten management API
 * REST API for management of Baseten resources
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.UpdateAutoscalingSettingsResponseV1;
import com.konfigthis.client.model.UpdateAutoscalingSettingsV1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AutoscalingSettingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AutoscalingSettingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AutoscalingSettingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call updateDeploymentSettingsCall(String modelId, String deploymentId, UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAutoscalingSettingsV1;

        // create path and map variables
        String localVarPath = "/v1/models/{model_id}/deployments/{deployment_id}/autoscaling_settings"
            .replace("{" + "model_id" + "}", localVarApiClient.escapeString(modelId.toString()))
            .replace("{" + "deployment_id" + "}", localVarApiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDeploymentSettingsValidateBeforeCall(String modelId, String deploymentId, UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling updateDeploymentSettings(Async)");
        }

        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling updateDeploymentSettings(Async)");
        }

        // verify the required parameter 'updateAutoscalingSettingsV1' is set
        if (updateAutoscalingSettingsV1 == null) {
            throw new ApiException("Missing the required parameter 'updateAutoscalingSettingsV1' when calling updateDeploymentSettings(Async)");
        }

        return updateDeploymentSettingsCall(modelId, deploymentId, updateAutoscalingSettingsV1, _callback);

    }


    private ApiResponse<UpdateAutoscalingSettingsResponseV1> updateDeploymentSettingsWithHttpInfo(String modelId, String deploymentId, UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1) throws ApiException {
        okhttp3.Call localVarCall = updateDeploymentSettingsValidateBeforeCall(modelId, deploymentId, updateAutoscalingSettingsV1, null);
        Type localVarReturnType = new TypeToken<UpdateAutoscalingSettingsResponseV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDeploymentSettingsAsync(String modelId, String deploymentId, UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1, final ApiCallback<UpdateAutoscalingSettingsResponseV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDeploymentSettingsValidateBeforeCall(modelId, deploymentId, updateAutoscalingSettingsV1, _callback);
        Type localVarReturnType = new TypeToken<UpdateAutoscalingSettingsResponseV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDeploymentSettingsRequestBuilder {
        private final String modelId;
        private final String deploymentId;
        private Integer minReplica;
        private Integer maxReplica;
        private Integer autoscalingWindow;
        private Integer scaleDownDelay;
        private Integer concurrencyTarget;

        private UpdateDeploymentSettingsRequestBuilder(String modelId, String deploymentId) {
            this.modelId = modelId;
            this.deploymentId = deploymentId;
        }

        /**
         * Set minReplica
         * @param minReplica Minimum number of replicas (optional)
         * @return UpdateDeploymentSettingsRequestBuilder
         */
        public UpdateDeploymentSettingsRequestBuilder minReplica(Integer minReplica) {
            this.minReplica = minReplica;
            return this;
        }
        
        /**
         * Set maxReplica
         * @param maxReplica Maximum number of replicas (optional)
         * @return UpdateDeploymentSettingsRequestBuilder
         */
        public UpdateDeploymentSettingsRequestBuilder maxReplica(Integer maxReplica) {
            this.maxReplica = maxReplica;
            return this;
        }
        
        /**
         * Set autoscalingWindow
         * @param autoscalingWindow Timeframe of traffic considered for autoscaling decisions (optional)
         * @return UpdateDeploymentSettingsRequestBuilder
         */
        public UpdateDeploymentSettingsRequestBuilder autoscalingWindow(Integer autoscalingWindow) {
            this.autoscalingWindow = autoscalingWindow;
            return this;
        }
        
        /**
         * Set scaleDownDelay
         * @param scaleDownDelay Waiting period before scaling down any active replica (optional)
         * @return UpdateDeploymentSettingsRequestBuilder
         */
        public UpdateDeploymentSettingsRequestBuilder scaleDownDelay(Integer scaleDownDelay) {
            this.scaleDownDelay = scaleDownDelay;
            return this;
        }
        
        /**
         * Set concurrencyTarget
         * @param concurrencyTarget Number of requests per replica before scaling up (optional)
         * @return UpdateDeploymentSettingsRequestBuilder
         */
        public UpdateDeploymentSettingsRequestBuilder concurrencyTarget(Integer concurrencyTarget) {
            this.concurrencyTarget = concurrencyTarget;
            return this;
        }
        
        /**
         * Build call for updateDeploymentSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response to a request to update autoscaling settings. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1 = buildBodyParams();
            return updateDeploymentSettingsCall(modelId, deploymentId, updateAutoscalingSettingsV1, _callback);
        }

        private UpdateAutoscalingSettingsV1 buildBodyParams() {
            UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1 = new UpdateAutoscalingSettingsV1();
            updateAutoscalingSettingsV1.minReplica(this.minReplica);
            updateAutoscalingSettingsV1.maxReplica(this.maxReplica);
            updateAutoscalingSettingsV1.autoscalingWindow(this.autoscalingWindow);
            updateAutoscalingSettingsV1.scaleDownDelay(this.scaleDownDelay);
            updateAutoscalingSettingsV1.concurrencyTarget(this.concurrencyTarget);
            return updateAutoscalingSettingsV1;
        }

        /**
         * Execute updateDeploymentSettings request
         * @return UpdateAutoscalingSettingsResponseV1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response to a request to update autoscaling settings. </td><td>  -  </td></tr>
         </table>
         */
        public UpdateAutoscalingSettingsResponseV1 execute() throws ApiException {
            UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1 = buildBodyParams();
            ApiResponse<UpdateAutoscalingSettingsResponseV1> localVarResp = updateDeploymentSettingsWithHttpInfo(modelId, deploymentId, updateAutoscalingSettingsV1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDeploymentSettings request with HTTP info returned
         * @return ApiResponse&lt;UpdateAutoscalingSettingsResponseV1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response to a request to update autoscaling settings. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateAutoscalingSettingsResponseV1> executeWithHttpInfo() throws ApiException {
            UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1 = buildBodyParams();
            return updateDeploymentSettingsWithHttpInfo(modelId, deploymentId, updateAutoscalingSettingsV1);
        }

        /**
         * Execute updateDeploymentSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response to a request to update autoscaling settings. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateAutoscalingSettingsResponseV1> _callback) throws ApiException {
            UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1 = buildBodyParams();
            return updateDeploymentSettingsAsync(modelId, deploymentId, updateAutoscalingSettingsV1, _callback);
        }
    }

    /**
     * Updates a deployment&#39;s autoscaling settings
     * Updates a deployment&#39;s autoscaling settings and returns the update status.
     * @param modelId  (required)
     * @param deploymentId  (required)
     * @param updateAutoscalingSettingsV1  (required)
     * @return UpdateDeploymentSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response to a request to update autoscaling settings. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDeploymentSettingsRequestBuilder updateDeploymentSettings(String modelId, String deploymentId) throws IllegalArgumentException {
        if (modelId == null) throw new IllegalArgumentException("\"modelId\" is required but got null");
            

        if (deploymentId == null) throw new IllegalArgumentException("\"deploymentId\" is required but got null");
            

        return new UpdateDeploymentSettingsRequestBuilder(modelId, deploymentId);
    }
    private okhttp3.Call updateDevelopmentSettingCall(String modelId, UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAutoscalingSettingsV1;

        // create path and map variables
        String localVarPath = "/v1/models/{model_id}/deployments/development/autoscaling_settings"
            .replace("{" + "model_id" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDevelopmentSettingValidateBeforeCall(String modelId, UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling updateDevelopmentSetting(Async)");
        }

        // verify the required parameter 'updateAutoscalingSettingsV1' is set
        if (updateAutoscalingSettingsV1 == null) {
            throw new ApiException("Missing the required parameter 'updateAutoscalingSettingsV1' when calling updateDevelopmentSetting(Async)");
        }

        return updateDevelopmentSettingCall(modelId, updateAutoscalingSettingsV1, _callback);

    }


    private ApiResponse<UpdateAutoscalingSettingsResponseV1> updateDevelopmentSettingWithHttpInfo(String modelId, UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1) throws ApiException {
        okhttp3.Call localVarCall = updateDevelopmentSettingValidateBeforeCall(modelId, updateAutoscalingSettingsV1, null);
        Type localVarReturnType = new TypeToken<UpdateAutoscalingSettingsResponseV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDevelopmentSettingAsync(String modelId, UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1, final ApiCallback<UpdateAutoscalingSettingsResponseV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDevelopmentSettingValidateBeforeCall(modelId, updateAutoscalingSettingsV1, _callback);
        Type localVarReturnType = new TypeToken<UpdateAutoscalingSettingsResponseV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDevelopmentSettingRequestBuilder {
        private final String modelId;
        private Integer minReplica;
        private Integer maxReplica;
        private Integer autoscalingWindow;
        private Integer scaleDownDelay;
        private Integer concurrencyTarget;

        private UpdateDevelopmentSettingRequestBuilder(String modelId) {
            this.modelId = modelId;
        }

        /**
         * Set minReplica
         * @param minReplica Minimum number of replicas (optional)
         * @return UpdateDevelopmentSettingRequestBuilder
         */
        public UpdateDevelopmentSettingRequestBuilder minReplica(Integer minReplica) {
            this.minReplica = minReplica;
            return this;
        }
        
        /**
         * Set maxReplica
         * @param maxReplica Maximum number of replicas (optional)
         * @return UpdateDevelopmentSettingRequestBuilder
         */
        public UpdateDevelopmentSettingRequestBuilder maxReplica(Integer maxReplica) {
            this.maxReplica = maxReplica;
            return this;
        }
        
        /**
         * Set autoscalingWindow
         * @param autoscalingWindow Timeframe of traffic considered for autoscaling decisions (optional)
         * @return UpdateDevelopmentSettingRequestBuilder
         */
        public UpdateDevelopmentSettingRequestBuilder autoscalingWindow(Integer autoscalingWindow) {
            this.autoscalingWindow = autoscalingWindow;
            return this;
        }
        
        /**
         * Set scaleDownDelay
         * @param scaleDownDelay Waiting period before scaling down any active replica (optional)
         * @return UpdateDevelopmentSettingRequestBuilder
         */
        public UpdateDevelopmentSettingRequestBuilder scaleDownDelay(Integer scaleDownDelay) {
            this.scaleDownDelay = scaleDownDelay;
            return this;
        }
        
        /**
         * Set concurrencyTarget
         * @param concurrencyTarget Number of requests per replica before scaling up (optional)
         * @return UpdateDevelopmentSettingRequestBuilder
         */
        public UpdateDevelopmentSettingRequestBuilder concurrencyTarget(Integer concurrencyTarget) {
            this.concurrencyTarget = concurrencyTarget;
            return this;
        }
        
        /**
         * Build call for updateDevelopmentSetting
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response to a request to update autoscaling settings. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1 = buildBodyParams();
            return updateDevelopmentSettingCall(modelId, updateAutoscalingSettingsV1, _callback);
        }

        private UpdateAutoscalingSettingsV1 buildBodyParams() {
            UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1 = new UpdateAutoscalingSettingsV1();
            updateAutoscalingSettingsV1.minReplica(this.minReplica);
            updateAutoscalingSettingsV1.maxReplica(this.maxReplica);
            updateAutoscalingSettingsV1.autoscalingWindow(this.autoscalingWindow);
            updateAutoscalingSettingsV1.scaleDownDelay(this.scaleDownDelay);
            updateAutoscalingSettingsV1.concurrencyTarget(this.concurrencyTarget);
            return updateAutoscalingSettingsV1;
        }

        /**
         * Execute updateDevelopmentSetting request
         * @return UpdateAutoscalingSettingsResponseV1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response to a request to update autoscaling settings. </td><td>  -  </td></tr>
         </table>
         */
        public UpdateAutoscalingSettingsResponseV1 execute() throws ApiException {
            UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1 = buildBodyParams();
            ApiResponse<UpdateAutoscalingSettingsResponseV1> localVarResp = updateDevelopmentSettingWithHttpInfo(modelId, updateAutoscalingSettingsV1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDevelopmentSetting request with HTTP info returned
         * @return ApiResponse&lt;UpdateAutoscalingSettingsResponseV1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response to a request to update autoscaling settings. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateAutoscalingSettingsResponseV1> executeWithHttpInfo() throws ApiException {
            UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1 = buildBodyParams();
            return updateDevelopmentSettingWithHttpInfo(modelId, updateAutoscalingSettingsV1);
        }

        /**
         * Execute updateDevelopmentSetting request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response to a request to update autoscaling settings. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateAutoscalingSettingsResponseV1> _callback) throws ApiException {
            UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1 = buildBodyParams();
            return updateDevelopmentSettingAsync(modelId, updateAutoscalingSettingsV1, _callback);
        }
    }

    /**
     * Updates a development deployment&#39;s autoscaling settings
     * Updates a development deployment&#39;s autoscaling settings and returns the update status.
     * @param modelId  (required)
     * @param updateAutoscalingSettingsV1  (required)
     * @return UpdateDevelopmentSettingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response to a request to update autoscaling settings. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDevelopmentSettingRequestBuilder updateDevelopmentSetting(String modelId) throws IllegalArgumentException {
        if (modelId == null) throw new IllegalArgumentException("\"modelId\" is required but got null");
            

        return new UpdateDevelopmentSettingRequestBuilder(modelId);
    }
    private okhttp3.Call updateStatusCall(String modelId, UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAutoscalingSettingsV1;

        // create path and map variables
        String localVarPath = "/v1/models/{model_id}/deployments/production/autoscaling_settings"
            .replace("{" + "model_id" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStatusValidateBeforeCall(String modelId, UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling updateStatus(Async)");
        }

        // verify the required parameter 'updateAutoscalingSettingsV1' is set
        if (updateAutoscalingSettingsV1 == null) {
            throw new ApiException("Missing the required parameter 'updateAutoscalingSettingsV1' when calling updateStatus(Async)");
        }

        return updateStatusCall(modelId, updateAutoscalingSettingsV1, _callback);

    }


    private ApiResponse<UpdateAutoscalingSettingsResponseV1> updateStatusWithHttpInfo(String modelId, UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1) throws ApiException {
        okhttp3.Call localVarCall = updateStatusValidateBeforeCall(modelId, updateAutoscalingSettingsV1, null);
        Type localVarReturnType = new TypeToken<UpdateAutoscalingSettingsResponseV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateStatusAsync(String modelId, UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1, final ApiCallback<UpdateAutoscalingSettingsResponseV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStatusValidateBeforeCall(modelId, updateAutoscalingSettingsV1, _callback);
        Type localVarReturnType = new TypeToken<UpdateAutoscalingSettingsResponseV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateStatusRequestBuilder {
        private final String modelId;
        private Integer minReplica;
        private Integer maxReplica;
        private Integer autoscalingWindow;
        private Integer scaleDownDelay;
        private Integer concurrencyTarget;

        private UpdateStatusRequestBuilder(String modelId) {
            this.modelId = modelId;
        }

        /**
         * Set minReplica
         * @param minReplica Minimum number of replicas (optional)
         * @return UpdateStatusRequestBuilder
         */
        public UpdateStatusRequestBuilder minReplica(Integer minReplica) {
            this.minReplica = minReplica;
            return this;
        }
        
        /**
         * Set maxReplica
         * @param maxReplica Maximum number of replicas (optional)
         * @return UpdateStatusRequestBuilder
         */
        public UpdateStatusRequestBuilder maxReplica(Integer maxReplica) {
            this.maxReplica = maxReplica;
            return this;
        }
        
        /**
         * Set autoscalingWindow
         * @param autoscalingWindow Timeframe of traffic considered for autoscaling decisions (optional)
         * @return UpdateStatusRequestBuilder
         */
        public UpdateStatusRequestBuilder autoscalingWindow(Integer autoscalingWindow) {
            this.autoscalingWindow = autoscalingWindow;
            return this;
        }
        
        /**
         * Set scaleDownDelay
         * @param scaleDownDelay Waiting period before scaling down any active replica (optional)
         * @return UpdateStatusRequestBuilder
         */
        public UpdateStatusRequestBuilder scaleDownDelay(Integer scaleDownDelay) {
            this.scaleDownDelay = scaleDownDelay;
            return this;
        }
        
        /**
         * Set concurrencyTarget
         * @param concurrencyTarget Number of requests per replica before scaling up (optional)
         * @return UpdateStatusRequestBuilder
         */
        public UpdateStatusRequestBuilder concurrencyTarget(Integer concurrencyTarget) {
            this.concurrencyTarget = concurrencyTarget;
            return this;
        }
        
        /**
         * Build call for updateStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response to a request to update autoscaling settings. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1 = buildBodyParams();
            return updateStatusCall(modelId, updateAutoscalingSettingsV1, _callback);
        }

        private UpdateAutoscalingSettingsV1 buildBodyParams() {
            UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1 = new UpdateAutoscalingSettingsV1();
            updateAutoscalingSettingsV1.minReplica(this.minReplica);
            updateAutoscalingSettingsV1.maxReplica(this.maxReplica);
            updateAutoscalingSettingsV1.autoscalingWindow(this.autoscalingWindow);
            updateAutoscalingSettingsV1.scaleDownDelay(this.scaleDownDelay);
            updateAutoscalingSettingsV1.concurrencyTarget(this.concurrencyTarget);
            return updateAutoscalingSettingsV1;
        }

        /**
         * Execute updateStatus request
         * @return UpdateAutoscalingSettingsResponseV1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response to a request to update autoscaling settings. </td><td>  -  </td></tr>
         </table>
         */
        public UpdateAutoscalingSettingsResponseV1 execute() throws ApiException {
            UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1 = buildBodyParams();
            ApiResponse<UpdateAutoscalingSettingsResponseV1> localVarResp = updateStatusWithHttpInfo(modelId, updateAutoscalingSettingsV1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateStatus request with HTTP info returned
         * @return ApiResponse&lt;UpdateAutoscalingSettingsResponseV1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response to a request to update autoscaling settings. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateAutoscalingSettingsResponseV1> executeWithHttpInfo() throws ApiException {
            UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1 = buildBodyParams();
            return updateStatusWithHttpInfo(modelId, updateAutoscalingSettingsV1);
        }

        /**
         * Execute updateStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response to a request to update autoscaling settings. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateAutoscalingSettingsResponseV1> _callback) throws ApiException {
            UpdateAutoscalingSettingsV1 updateAutoscalingSettingsV1 = buildBodyParams();
            return updateStatusAsync(modelId, updateAutoscalingSettingsV1, _callback);
        }
    }

    /**
     * Updates a production deployment&#39;s autoscaling settings
     * Updates a production deployment&#39;s autoscaling settings and returns the update status.
     * @param modelId  (required)
     * @param updateAutoscalingSettingsV1  (required)
     * @return UpdateStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response to a request to update autoscaling settings. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStatusRequestBuilder updateStatus(String modelId) throws IllegalArgumentException {
        if (modelId == null) throw new IllegalArgumentException("\"modelId\" is required but got null");
            

        return new UpdateStatusRequestBuilder(modelId);
    }
}
