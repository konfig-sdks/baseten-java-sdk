/*
 * Baseten management API
 * REST API for management of Baseten resources
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DeploymentV1;
import com.konfigthis.client.model.DeploymentsV1;
import com.konfigthis.client.model.ModelV1;
import com.konfigthis.client.model.ModelsV1;
import com.konfigthis.client.model.PromoteRequestV1;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ModelApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ModelApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ModelApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"Authorization\" is required but no API key was provided. Please set \"Authorization\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deployPromoteCall(String modelId, PromoteRequestV1 promoteRequestV1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promoteRequestV1;

        // create path and map variables
        String localVarPath = "/v1/models/{model_id}/deployments/development/promote"
            .replace("{" + "model_id" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployPromoteValidateBeforeCall(String modelId, PromoteRequestV1 promoteRequestV1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling deployPromote(Async)");
        }

        // verify the required parameter 'promoteRequestV1' is set
        if (promoteRequestV1 == null) {
            throw new ApiException("Missing the required parameter 'promoteRequestV1' when calling deployPromote(Async)");
        }

        return deployPromoteCall(modelId, promoteRequestV1, _callback);

    }


    private ApiResponse<DeploymentV1> deployPromoteWithHttpInfo(String modelId, PromoteRequestV1 promoteRequestV1) throws ApiException {
        okhttp3.Call localVarCall = deployPromoteValidateBeforeCall(modelId, promoteRequestV1, null);
        Type localVarReturnType = new TypeToken<DeploymentV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deployPromoteAsync(String modelId, PromoteRequestV1 promoteRequestV1, final ApiCallback<DeploymentV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployPromoteValidateBeforeCall(modelId, promoteRequestV1, _callback);
        Type localVarReturnType = new TypeToken<DeploymentV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeployPromoteRequestBuilder {
        private final String modelId;
        private Boolean scaleDownPreviousProduction;

        private DeployPromoteRequestBuilder(String modelId) {
            this.modelId = modelId;
        }

        /**
         * Set scaleDownPreviousProduction
         * @param scaleDownPreviousProduction Whether to scale down the previous production deployment after promoting (optional, default to true)
         * @return DeployPromoteRequestBuilder
         */
        public DeployPromoteRequestBuilder scaleDownPreviousProduction(Boolean scaleDownPreviousProduction) {
            this.scaleDownPreviousProduction = scaleDownPreviousProduction;
            return this;
        }
        
        /**
         * Build call for deployPromote
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A deployment of a model. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PromoteRequestV1 promoteRequestV1 = buildBodyParams();
            return deployPromoteCall(modelId, promoteRequestV1, _callback);
        }

        private PromoteRequestV1 buildBodyParams() {
            PromoteRequestV1 promoteRequestV1 = new PromoteRequestV1();
            promoteRequestV1.scaleDownPreviousProduction(this.scaleDownPreviousProduction);
            return promoteRequestV1;
        }

        /**
         * Execute deployPromote request
         * @return DeploymentV1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A deployment of a model. </td><td>  -  </td></tr>
         </table>
         */
        public DeploymentV1 execute() throws ApiException {
            PromoteRequestV1 promoteRequestV1 = buildBodyParams();
            ApiResponse<DeploymentV1> localVarResp = deployPromoteWithHttpInfo(modelId, promoteRequestV1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deployPromote request with HTTP info returned
         * @return ApiResponse&lt;DeploymentV1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A deployment of a model. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeploymentV1> executeWithHttpInfo() throws ApiException {
            PromoteRequestV1 promoteRequestV1 = buildBodyParams();
            return deployPromoteWithHttpInfo(modelId, promoteRequestV1);
        }

        /**
         * Execute deployPromote request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A deployment of a model. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeploymentV1> _callback) throws ApiException {
            PromoteRequestV1 promoteRequestV1 = buildBodyParams();
            return deployPromoteAsync(modelId, promoteRequestV1, _callback);
        }
    }

    /**
     * Promotes a development deployment to production
     * Creates a new production deployment from the development deployment, the currently building deployment is returned.
     * @param modelId  (required)
     * @param promoteRequestV1  (required)
     * @return DeployPromoteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A deployment of a model. </td><td>  -  </td></tr>
     </table>
     */
    public DeployPromoteRequestBuilder deployPromote(String modelId) throws IllegalArgumentException {
        if (modelId == null) throw new IllegalArgumentException("\"modelId\" is required but got null");
            

        return new DeployPromoteRequestBuilder(modelId);
    }
    private okhttp3.Call deploymentPromoteCall(String modelId, String deploymentId, PromoteRequestV1 promoteRequestV1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = promoteRequestV1;

        // create path and map variables
        String localVarPath = "/v1/models/{model_id}/deployments/{deployment_id}/promote"
            .replace("{" + "model_id" + "}", localVarApiClient.escapeString(modelId.toString()))
            .replace("{" + "deployment_id" + "}", localVarApiClient.escapeString(deploymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deploymentPromoteValidateBeforeCall(String modelId, String deploymentId, PromoteRequestV1 promoteRequestV1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling deploymentPromote(Async)");
        }

        // verify the required parameter 'deploymentId' is set
        if (deploymentId == null) {
            throw new ApiException("Missing the required parameter 'deploymentId' when calling deploymentPromote(Async)");
        }

        // verify the required parameter 'promoteRequestV1' is set
        if (promoteRequestV1 == null) {
            throw new ApiException("Missing the required parameter 'promoteRequestV1' when calling deploymentPromote(Async)");
        }

        return deploymentPromoteCall(modelId, deploymentId, promoteRequestV1, _callback);

    }


    private ApiResponse<DeploymentV1> deploymentPromoteWithHttpInfo(String modelId, String deploymentId, PromoteRequestV1 promoteRequestV1) throws ApiException {
        okhttp3.Call localVarCall = deploymentPromoteValidateBeforeCall(modelId, deploymentId, promoteRequestV1, null);
        Type localVarReturnType = new TypeToken<DeploymentV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deploymentPromoteAsync(String modelId, String deploymentId, PromoteRequestV1 promoteRequestV1, final ApiCallback<DeploymentV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = deploymentPromoteValidateBeforeCall(modelId, deploymentId, promoteRequestV1, _callback);
        Type localVarReturnType = new TypeToken<DeploymentV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeploymentPromoteRequestBuilder {
        private final String modelId;
        private final String deploymentId;
        private Boolean scaleDownPreviousProduction;

        private DeploymentPromoteRequestBuilder(String modelId, String deploymentId) {
            this.modelId = modelId;
            this.deploymentId = deploymentId;
        }

        /**
         * Set scaleDownPreviousProduction
         * @param scaleDownPreviousProduction Whether to scale down the previous production deployment after promoting (optional, default to true)
         * @return DeploymentPromoteRequestBuilder
         */
        public DeploymentPromoteRequestBuilder scaleDownPreviousProduction(Boolean scaleDownPreviousProduction) {
            this.scaleDownPreviousProduction = scaleDownPreviousProduction;
            return this;
        }
        
        /**
         * Build call for deploymentPromote
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A deployment of a model. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PromoteRequestV1 promoteRequestV1 = buildBodyParams();
            return deploymentPromoteCall(modelId, deploymentId, promoteRequestV1, _callback);
        }

        private PromoteRequestV1 buildBodyParams() {
            PromoteRequestV1 promoteRequestV1 = new PromoteRequestV1();
            promoteRequestV1.scaleDownPreviousProduction(this.scaleDownPreviousProduction);
            return promoteRequestV1;
        }

        /**
         * Execute deploymentPromote request
         * @return DeploymentV1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A deployment of a model. </td><td>  -  </td></tr>
         </table>
         */
        public DeploymentV1 execute() throws ApiException {
            PromoteRequestV1 promoteRequestV1 = buildBodyParams();
            ApiResponse<DeploymentV1> localVarResp = deploymentPromoteWithHttpInfo(modelId, deploymentId, promoteRequestV1);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deploymentPromote request with HTTP info returned
         * @return ApiResponse&lt;DeploymentV1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A deployment of a model. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeploymentV1> executeWithHttpInfo() throws ApiException {
            PromoteRequestV1 promoteRequestV1 = buildBodyParams();
            return deploymentPromoteWithHttpInfo(modelId, deploymentId, promoteRequestV1);
        }

        /**
         * Execute deploymentPromote request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A deployment of a model. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeploymentV1> _callback) throws ApiException {
            PromoteRequestV1 promoteRequestV1 = buildBodyParams();
            return deploymentPromoteAsync(modelId, deploymentId, promoteRequestV1, _callback);
        }
    }

    /**
     * Promotes a deployment to production
     * Promotes an existing deployment to production and returns the same deployment.
     * @param modelId  (required)
     * @param deploymentId  (required)
     * @param promoteRequestV1  (required)
     * @return DeploymentPromoteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A deployment of a model. </td><td>  -  </td></tr>
     </table>
     */
    public DeploymentPromoteRequestBuilder deploymentPromote(String modelId, String deploymentId) throws IllegalArgumentException {
        if (modelId == null) throw new IllegalArgumentException("\"modelId\" is required but got null");
            

        if (deploymentId == null) throw new IllegalArgumentException("\"deploymentId\" is required but got null");
            

        return new DeploymentPromoteRequestBuilder(modelId, deploymentId);
    }
    private okhttp3.Call getAllDeploymentsCall(String modelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/models/{model_id}/deployments"
            .replace("{" + "model_id" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllDeploymentsValidateBeforeCall(String modelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling getAllDeployments(Async)");
        }

        return getAllDeploymentsCall(modelId, _callback);

    }


    private ApiResponse<DeploymentsV1> getAllDeploymentsWithHttpInfo(String modelId) throws ApiException {
        okhttp3.Call localVarCall = getAllDeploymentsValidateBeforeCall(modelId, null);
        Type localVarReturnType = new TypeToken<DeploymentsV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllDeploymentsAsync(String modelId, final ApiCallback<DeploymentsV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllDeploymentsValidateBeforeCall(modelId, _callback);
        Type localVarReturnType = new TypeToken<DeploymentsV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllDeploymentsRequestBuilder {
        private final String modelId;

        private GetAllDeploymentsRequestBuilder(String modelId) {
            this.modelId = modelId;
        }

        /**
         * Build call for getAllDeployments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of deployments of a model. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllDeploymentsCall(modelId, _callback);
        }


        /**
         * Execute getAllDeployments request
         * @return DeploymentsV1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of deployments of a model. </td><td>  -  </td></tr>
         </table>
         */
        public DeploymentsV1 execute() throws ApiException {
            ApiResponse<DeploymentsV1> localVarResp = getAllDeploymentsWithHttpInfo(modelId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllDeployments request with HTTP info returned
         * @return ApiResponse&lt;DeploymentsV1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of deployments of a model. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeploymentsV1> executeWithHttpInfo() throws ApiException {
            return getAllDeploymentsWithHttpInfo(modelId);
        }

        /**
         * Execute getAllDeployments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of deployments of a model. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeploymentsV1> _callback) throws ApiException {
            return getAllDeploymentsAsync(modelId, _callback);
        }
    }

    /**
     * Gets all deployments of a model
     * 
     * @param modelId  (required)
     * @return GetAllDeploymentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of deployments of a model. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllDeploymentsRequestBuilder getAllDeployments(String modelId) throws IllegalArgumentException {
        if (modelId == null) throw new IllegalArgumentException("\"modelId\" is required but got null");
            

        return new GetAllDeploymentsRequestBuilder(modelId);
    }
    private okhttp3.Call getAllModelsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/models";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllModelsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllModelsCall(_callback);

    }


    private ApiResponse<ModelsV1> getAllModelsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllModelsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ModelsV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllModelsAsync(final ApiCallback<ModelsV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllModelsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ModelsV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllModelsRequestBuilder {

        private GetAllModelsRequestBuilder() {
        }

        /**
         * Build call for getAllModels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of models. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllModelsCall(_callback);
        }


        /**
         * Execute getAllModels request
         * @return ModelsV1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of models. </td><td>  -  </td></tr>
         </table>
         */
        public ModelsV1 execute() throws ApiException {
            ApiResponse<ModelsV1> localVarResp = getAllModelsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllModels request with HTTP info returned
         * @return ApiResponse&lt;ModelsV1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of models. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelsV1> executeWithHttpInfo() throws ApiException {
            return getAllModelsWithHttpInfo();
        }

        /**
         * Execute getAllModels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of models. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelsV1> _callback) throws ApiException {
            return getAllModelsAsync(_callback);
        }
    }

    /**
     * Gets all models
     * 
     * @return GetAllModelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of models. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllModelsRequestBuilder getAllModels() throws IllegalArgumentException {
        return new GetAllModelsRequestBuilder();
    }
    private okhttp3.Call getModelByIdCall(String modelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/models/{model_id}"
            .replace("{" + "model_id" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getModelByIdValidateBeforeCall(String modelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling getModelById(Async)");
        }

        return getModelByIdCall(modelId, _callback);

    }


    private ApiResponse<ModelV1> getModelByIdWithHttpInfo(String modelId) throws ApiException {
        okhttp3.Call localVarCall = getModelByIdValidateBeforeCall(modelId, null);
        Type localVarReturnType = new TypeToken<ModelV1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getModelByIdAsync(String modelId, final ApiCallback<ModelV1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getModelByIdValidateBeforeCall(modelId, _callback);
        Type localVarReturnType = new TypeToken<ModelV1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetModelByIdRequestBuilder {
        private final String modelId;

        private GetModelByIdRequestBuilder(String modelId) {
            this.modelId = modelId;
        }

        /**
         * Build call for getModelById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A model. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getModelByIdCall(modelId, _callback);
        }


        /**
         * Execute getModelById request
         * @return ModelV1
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A model. </td><td>  -  </td></tr>
         </table>
         */
        public ModelV1 execute() throws ApiException {
            ApiResponse<ModelV1> localVarResp = getModelByIdWithHttpInfo(modelId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getModelById request with HTTP info returned
         * @return ApiResponse&lt;ModelV1&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A model. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelV1> executeWithHttpInfo() throws ApiException {
            return getModelByIdWithHttpInfo(modelId);
        }

        /**
         * Execute getModelById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A model. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelV1> _callback) throws ApiException {
            return getModelByIdAsync(modelId, _callback);
        }
    }

    /**
     * Gets a model by ID
     * 
     * @param modelId  (required)
     * @return GetModelByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A model. </td><td>  -  </td></tr>
     </table>
     */
    public GetModelByIdRequestBuilder getModelById(String modelId) throws IllegalArgumentException {
        if (modelId == null) throw new IllegalArgumentException("\"modelId\" is required but got null");
            

        return new GetModelByIdRequestBuilder(modelId);
    }
}
